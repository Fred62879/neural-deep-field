
global:
    verbose: True
    exp_name: 'test-ngp-nerf'
    #tasks: ['train','save_recon_during_train','infer','recon_img']
    tasks: ['infer','recon_img']

optimizer:
    optimizer_type: 'rmsprop'
    lr: 0.001

dataset:
    dataset_type: 'astro2d'
    fits_choice_id: '0'
    space_dim: 2
    load_cache: True
    dataset_path: '../../data/pdr3'
    gt_img_norm_cho: 'identity'     # identity/arcsinh/linear/clip(0,1)
    output_norm_cho: 'sinh'   # identity/arcsinh/sinh
    train_pixels_norm: 'identity' # identity/arcsinh/sinh/linear/clip(0,1)

    gt_spectra_cho: -1
    wave_lo: 6000
    wave_hi: 8000
    uniform_smpl: True
    generate_trans: True # set to True once for each setup
    trans_cho: 'orig_trans'

    use_full_fits: False
    fits_cutout_size: 64
    fits_tile_ids: ['1'] #,'1']
    fits_subtile_ids: ['5'] #,'7']
    fits_footprints: ['9812'] #,'9812']

    #start_r: 2000 # large pixl 5
    #start_c: 900  # large pixl 5
    start_r: 86
    start_c: 188
    #start_r: 1900 # 192 img sz
    #start_c: 772
    #start_r: 1908 # 4 spectra 
    #start_c: 708
    #start_r: 750  # large pixel value 8 bands
    #start_c: 3200
    #start_r: 80   # large pixel value 5 bands 64
    #start_c: 190

    # sensor_collection_name: '1_y'
    # filter_ids: [4]
    # filters: [y]
    # sensors_full_name: [HSC-Y]

    sensor_collection_name: '5_grizy'
    filter_ids: [0,1,2,3,4]
    filters: [g,r,i,z,y]
    sensors_full_name: [HSC-G,HSC-R,HSC-I,HSC-Z,HSC-Y]

    # sensor_collection_name: '8'
    # filter_ids: [0,1,2,3,4,5,6,7]
    # filters: [g,r,i,z,y,nb387,nb816,nb921]
    # sensors_full_name: [HSC-G,HSC-R,HSC-I,HSC-Z,HSC-Y,NB0387,NB0816,NB0921]

    # sensor_collection_name: '10'
    # filter_ids: [0,1,2,3,4,5,6,7,8,9]
    # filters: [g,r,i,z,y,nb387,nb816,nb921,u,us]
    # sensors_full_name: [HSC-G,HSC-R,HSC-I,HSC-Z,HSC-Y,NB0387,NB0816,NB0921,u,uS]

    trans_thresh: 1e-3

trainer:
    trainer_type: 'AstroTrainer'
    log_dir: '../../data/pdr3/output'

    num_epochs: 400
    batch_size: 4096000
    valid_every: -1
    save_every: 400
    render_tb_every: -1
    log_tb_every: 100
    log_gpu_every: 100
    save_local_every: 400
    save_as_new: True
    #train_pixl_ratio_per_epoch: 1e-6
    #masked_pixl_ratio_per_epoch: 1
    #num_model_checkpoint: 10

    loss_cho: l1
    weight_train: False
    resume_train: False
    train_use_all_wave: False
    #permute_pixls_train: True

    # spectra supervision
    spectra_supervision: False
    trans_smpl_interval: 10
    trusted_wave_lo: 6000
    trusted_wave_hi: 8000
    spectra_supervision_cho: 1

infer:
    inferrer_type: 'AstroInferrer'
    infer_batch_size: 409600
    to_HDU: True
    infer_use_all_wave: True # enforced
    #infer_log_fname: '20221219-175517'
    metric_options: ['mse','ssim','psnr']

    recon_cutout_fits_ids: ['981215']
    recon_cutout_sizes: [ [64] ]
    recon_cutout_start_pos: [ [[0,0]] ] #[86,188]
   
test:
    is_test: False
    fake_spectra_cho: -1

grid:
    grid_type: 'HashGrid'
    interpolation_type: 'linear'
    multiscale_type: 'cat'
    feature_dim: 2
    feature_std: 0.01
    num_lods: 12
    tree_type: 'geometric'
    min_grid_res: 1
    max_grid_res: 96
    codebook_bitwidth: 19

net:
    nef_type: 'NeuralHyperSpectral'
    use_ngp: True
    hidden_dim: 64
    num_layers: 1
    out_dim: 5

embedder:
    embedder_type: 'positional'

monte_carlo:
    mc_cho: 'mc_mixture'

    encode: True
    encoder_mlp_seed: 0
    encoder_output_scaler: True
    encoder_output_redshift: False

    latent_dim: 3
    encoder_dim_hidden: 256
    encoder_num_hidden_layers: 1

    encoder_cho: 'relumlp'
    encoder_first_w0: 30
    encoder_hidden_w0: 30
    encoder_siren_last_linr: True
    encoder_coords_scaler: 1
    encoder_mfn_w_scale: 10
    encoder_mfn_omega: 150
    encoder_mfn_alpha: 6
    encoder_mfn_beta: 1
    encoder_pe_cho: 'rand_gaus'
    encoder_pe_omega: 1
    encoder_pe_sigma: 1
    encoder_pe_dim: 4000
    encoder_pe_min_deg: 0
    encoder_pe_max_deg: 1500

    # ~ quantizer
    vae_beta: 1
    num_embd: 4
    cdbk_seed: 8
    quantize_latent: False
    plot_latent: True

    pe_wave: True
    wave_pe_cho: 'rand_gaus'
    wave_pe_seed: 1
    wave_pe_omega: 1
    wave_pe_sigma: 1
    wave_pe_dim: 16 # cannot be odd
    wave_pe_min_deg: 0
    wave_pe_max_deg: 500

    ## iii) main mlp
    mlp_cho: 'siren'
    mlp_seed: 0
    mlp_dim_hidden: 256
    mlp_num_hidden_layers: 3

    first_w0: 24
    hidden_w0: 6
    coords_scaler: 8

    mfn_w_scale: 10
    mfn_omega: 150
    mfn_alpha: 6
    mfn_beta: 1

    pe_cho: 'rand_gaus'
    pe_seed: 1
    pe_omega: 4
    pe_sigma: 4
    pe_dim: 10000
    pe_min_deg: 0
    pe_max_deg: 1500

inpaint:
    inpaint_cho: 'no_inpaint' # 'spectral_inpaint'
    sample_ratio: .01 # 0-1

    # assume max set is 10 bands in this order [GRIZY,nb387,nb816,nb921,u,us]
    # always makes sure mask creation is called for a continuous set of bands
    # if train and inpaint bands dont form a continuous seq e.g. (train [1R,8u], inpaint [8u])
    # set mask band to any set of continuous bands that include current train and inpaint bands,
    # preferrably something like [0,1,2,3,4,5,6,7,8].
    # When do masking, pick only 1 and 8 channel from the full mask

    # define mask directory
    mask_config: 'rand_same'
    mask_bandset_cho: '5grizy' # *change everytime
    mask_seed: 0              # seed to do random masking

    # define current train and inpaint bands (only used by spectral inpainting)
    # for us band, we use mask created for all 10 bands, where us is 9th train_bands: [0,1,3,4,5,6,8]
    #train_bands: [0,1,3,4,5,6,8]
    #inpaint_bands: [2,7,9]
    #relative_train_bands: [0,1,3,4,5,6,8]
    #relative_inpaint_bands: [2,7,9]
    train_bands: [0,2,3,4]
    inpaint_bands: [1]
    relative_train_bands: [0,2,3,4]
    relative_inpaint_bands: [1]