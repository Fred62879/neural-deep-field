
global:
    verbose: True
    exp_name: 'test-ngp-nerf'
    tasks: ['train','save_recon_during_train','infer','recon_img']
    #tasks: ['infer','recon_img']

optimizer:
    optimizer_type: 'rmsprop'
    lr: 0.001

dataset:
    space_dim: 3
    dataset_type: 'astro'
    load_fits_data_cache: True
    dataset_path: '../../data/pdr3'
    gt_img_norm_cho: 'identity'     # identity/arcsinh/linear/clip(0,1)
    output_norm_cho: 'sinh'   # identity/arcsinh/sinh
    train_pixels_norm: 'identity' # identity/arcsinh/sinh/linear/clip(0,1)

    use_full_fits: False
    # always pick exactly one cutout from one tile
    fits_tile_ids: ['1'] #,'1']
    fits_subtile_ids: ['5'] #['5','7']
    fits_footprints: ['9812'] #,'9812']
    fits_cutout_sizes: [ 64 ]
    fits_cutout_start_pos: [[86,188]] #,[240,270] ]

    # num_bands: 1
    # sensor_collection_name: '1_y'
    # filter_ids: [4]
    # filters: [y]
    # sensors_full_name: [HSC-Y]

    num_bands: 5
    sensor_collection_name: '5_grizy'
    filter_ids: [0,1,2,3,4]
    filters: [g,r,i,z,y]
    sensors_full_name: [HSC-G,HSC-R,HSC-I,HSC-Z,HSC-Y]

    # num_bands: 10
    # sensor_collection_name: '10'
    # filter_ids: [0,1,2,3,4,5,6,7,8,9]
    # filters: [g,r,i,z,y,nb387,nb816,nb921,u,us]
    # sensors_full_name: [HSC-G,HSC-R,HSC-I,HSC-Z,HSC-Y,NB0387,NB0816,NB0921,u,uS]

    wave_lo: 6000
    wave_hi: 8000
    plot_trans: True
    trans_sample_method: 'mixture'
    trans_threshold: 1e-3
    hardcode_num_trans_samples: 40
    gt_spectra_cho: -1

trainer:
    trainer_type: 'AstroTrainer'
    log_dir: '../../data/pdr3/output'

    num_epochs: 1000
    batch_size: 4096000
    valid_every: -1
    save_every: 400
    render_tb_every: -1
    log_tb_every: 100
    log_gpu_every: 100
    save_local_every: 400
    save_as_new: True
    #train_pixl_ratio_per_epoch: 1e-6
    #masked_pixl_ratio_per_epoch: 1
    #num_model_checkpoint: 10

    loss_cho: l1
    weight_train: False
    resume_train: False
    #resume_log_dir: '20221220-194546'
    #pretrained_model_name: 'model-ep800-it2.pth'
    train_use_all_wave: False
    #permute_pixls_train: True

    # spectra supervision
    num_trans_samples: 40
    uniform_sample_trans: True
    mixture_avg_per_band: True
    spectra_supervision: False
    trans_smpl_interval: 10
    trusted_wave_lo: 6000
    trusted_wave_hi: 8000
    spectra_supervision_cho: 1

infer:
    inferrer_type: 'AstroInferrer'
    infer_batch_size: 409600
    to_HDU: True
    infer_use_all_wave: True # enforced
    #infer_log_fname: '20221219-175517'
    metric_options: ['mse','ssim','psnr']

    #recon_cutout_fits_ids: ['981215','981217']
    # each fits may have multiple cutouts
    #recon_cutout_sizes: [ [64], [32] ]
    #recon_cutout_start_pos: [ [[0,0]], [[0,0]] ] #[86,188]
   
test:
    is_test: False
    fake_spectra_cho: -1

net:
    nef_type: 'NeuralHyperSpectral'

    # decoder
    hidden_dim: 64
    num_layers: 1
    out_dim: 5

embedder:
    embedder_type: 'positional'

grid:
    grid_type: 'HashGrid'
    interpolation_type: 'linear'
    multiscale_type: 'cat'
    feature_dim: 4
    feature_std: 0.01
    num_lods: 12
    tree_type: 'geometric'
    min_grid_res: 1
    max_grid_res: 64
    codebook_bitwidth: 22

hyperspectral:
    coords_embed_dim: 2000
    coords_embed_method: 'none'
    wave_embed_dim: 2000
    wave_embed_method: 'none'
    hps_convert_method: 'add'
    hps_decod_activation_type: 'sin'
    hps_decod_num_layers: 1
    hps_decod_hidden_dim: 64
    hps_decod_layer_type: 'none'
    integration_method: 'dot_prod'

    hps_siren_seed: 0
    hps_siren_first_w0: 30
    hps_siren_hidden_w0: 30
    hps_siren_coords_scaler: 1
    hps_siren_last_linear: False

inpaint:
    inpaint_cho: 'no_inpaint' # 'spectral_inpaint'
    sample_ratio: .01 # 0-1

    # assume max set is 10 bands in this order [GRIZY,nb387,nb816,nb921,u,us]
    # always makes sure mask creation is called for a continuous set of bands
    # if train and inpaint bands dont form a continuous seq e.g. (train [1R,8u], inpaint [8u])
    # set mask band to any set of continuous bands that include current train and inpaint bands,
    # preferrably something like [0,1,2,3,4,5,6,7,8].
    # When do masking, pick only 1 and 8 channel from the full mask

    # define mask directory
    mask_config: 'rand_same'
    mask_bandset_cho: '5grizy' # *change everytime
    mask_seed: 0              # seed to do random masking

    # define current train and inpaint bands (only used by spectral inpainting)
    # for us band, we use mask created for all 10 bands, where us is 9th train_bands: [0,1,3,4,5,6,8]
    #train_bands: [0,1,3,4,5,6,8]
    #inpaint_bands: [2,7,9]
    #relative_train_bands: [0,1,3,4,5,6,8]
    #relative_inpaint_bands: [2,7,9]
    train_bands: [0,2,3,4]
    inpaint_bands: [1]
    relative_train_bands: [0,2,3,4]
    relative_inpaint_bands: [1]